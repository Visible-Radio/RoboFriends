{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5B,OACC,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACC,6BAAKF,IACL,4BAAIC,WCiBOK,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAInB,OACC,8BAEEA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,cAAC,EAAD,CAECR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCEGC,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACC,8BACC,uBACCT,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCCI,EARA,SAACC,GACf,OACC,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,SAA1C,SACEH,EAAMI,YCiBKC,E,kDAnBd,WAAYL,GAAQ,IAAD,8BAClB,cAAMA,IACDM,MAAQ,CACZC,UAAU,GAHO,E,8DAODC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACP,4DAEDG,KAAKV,MAAMI,a,GAhBQQ,aCyDbC,G,wDA/Cd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,QAC1CC,QAAQC,IAAI,EAAKN,gBACjBK,QAAQC,IAAIL,EAAME,OAAOC,QAfzB,EAAKZ,MAAQ,CACZhB,OAAQ,GACR0B,YAAa,IAJD,E,gEAQO,IAAD,OACnBK,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKd,SAAS,CAACrB,OAAQmC,S,+BAS7B,IAAD,EACuBf,KAAKJ,MAA7BhB,EADC,EACDA,OAAQ0B,EADP,EACOA,YACVU,EAAiBpC,EAAOqC,QAAO,SAAAC,GACpC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASd,EAAYa,kBAEtD,OAAQvC,EAAOyC,OAGb,sBAAK7C,UAAU,KAAf,UACC,oBAAIA,UAAU,IAAd,yBAOA,cAAC,EAAD,CAAWS,aAAce,KAAKI,iBAC9B,cAAC,EAAD,UACC,cAAC,EAAD,UACC,cAAC,EAAD,CAAUxB,OAAQoC,WAbtB,6C,GA3Bed,cCCHoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCGdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8410f8ee.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\t// if (true) {\n\t// \tthrow new Error('NOOOOOOOO!');\n\t// }\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user,i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\tid={robots[i].id}\n\t\t\t\t\t\t\tname={robots[i].name}\n\t\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\t\t\t\n\t  </div>\n\t);\t\t\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<div>\n\t\t\t<input\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='search robots'\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\t\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false,\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true });\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Ooooops. That is not good!</h1>;\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary.js';\nimport './App.css';\n\n\n// STATE >> props\n// props are things that come out of a state\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => this.setState({robots: users}))\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value });\n\t\tconsole.log(this.onSearchChange);\n\t\tconsole.log(event.target.value);\t\n\t}\n\n\trender () {\n\t\tconst { robots, searchfield } = this.state;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\t\treturn !robots.length ? \n\t\t\t<h1>Loading</h1> :\n\t\t  (\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className=\"f\">RoboFriends</h1>\n\t\t\t\t\t{/*SearchBox gets passed a property storing the FUNCTION onSearchChange\n\t\t\t\t\t\tThis updates the state, storing the contents of the searchfield in the \n\t\t\t\t\t\tstate object.  A filtered array is created, filtered according to the \n\t\t\t\t\t\tstate of the searcfield.  This array is passed as a property to CardList.\n\t\t\t\t\t\tCardList iterates over the filtered array, passing values from it to Card.\n\t\t\t\t\t*/}\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundary>\t\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t}\t\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n// import Card from './components/Card';\n// import CardList from './components/CardList';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n// import { robots } from './robots';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}